<?php
/**
 * Created by PhpStorm.
 * User: zhoutianliang
 * Date: 2018/2/1
 * Time: 15:54
 */

namespace Surf;




use Pimple\Container;
use Pimple\Psr11\Container as Psr11Container;
use Pimple\ServiceProviderInterface;
use Surf\Api\BootableProviderInterface;
use Surf\Api\EventListenerProviderInterface;
use Surf\Exception\ServerNotFoundException;
use Surf\Provider\DatabaseServiceProvider;
use Surf\Provider\KernelServiceProvider;
use Surf\Provider\RouterServiceProvider;
use Surf\Provider\ServerServiceProvider;
use Surf\Server\Server;

/**
 * Class Application
 * @package Surf
 */
class Application extends Container
{

    /**
     * @var null|string
     */
    static $basePath = null;

    /**
     * @var null|Psr11Container
     */
    private $container = null;

    /**
     * @var bool
     */
    private $isBoot = false;

    private $provider = [];
    /**
     * Application constructor.
     * @param string|null $path
     * @param array $values
     */
    public function __construct(string $path = null, array $values = [])
    {
        parent::__construct($values);
        $this->container = new Psr11Container($this);
        self::$basePath = $path;
        $this->register(new ServerServiceProvider());
        $this->register(new KernelServiceProvider());
        $this->register(new RouterServiceProvider());
        $this->register(new DatabaseServiceProvider());
    }

    /**
     * @param ServiceProviderInterface $provider
     * @param array $values
     * @return Container
     */
    public function register(ServiceProviderInterface $provider, array $values = array())
    {
        $this->provider[] = $provider;
        return parent::register($provider, $values); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function boot()
    {
        if ($this->isBoot) {
            return ;
        }
        foreach ($this->provider as $provider) {
            if ($provider instanceof EventListenerProviderInterface) {
                $provider->subscribe($this, $this['dispatcher']);
            }
            if ($provider instanceof BootableProviderInterface) {
                $provider->boot($this);
            }
        }
    }

    /**
     * @return null|Psr11Container
     */
    public function getContainer()
    {
        return $this->container;
    }
    /**
     * @param string $id
     * @return mixed
     */
    public function get(string $id)
    {
        return $this->container->get($id);
    }

    /**
     * @param string $id
     * @return bool
     */
    public function has(string $id)
    {
        return $this->container->has($id);
    }

    /**
     * @param string $pattern
     * @param mixed $callback
     * @return $this
     */
    public function addGet(string $pattern, $callback)
    {
        $this['router']->get($pattern, $callback);
        return $this;
    }

    /**
     * @param string $pattern
     * @param mixed $callback
     * @return $this
     */
    public function addPost(string $pattern, $callback)
    {
        $this['router']->post($pattern, $callback);
        return $this;
    }

    /**
     * @param string $pattern
     * @param mixed $callback
     * @return $this
     */
    public function addPut(string $pattern, $callback)
    {
        $this['router']->put($pattern, $callback);
        return $this;
    }

    /**
     * @param string $pattern
     * @param mixed $callback
     * @return $this
     */
    public function addDelete(string $pattern, $callback)
    {
        $this['router']->delete($pattern, $callback);
        return $this;
    }

    /**
     * @param string $pattern
     * @param mixed $callback
     * @return $this
     */
    public function addPatch(string $pattern, $callback)
    {
        $this['router']->patch($pattern, $callback);
        return $this;
    }

    /**
     * @param string $pattern
     * @param mixed $callback
     * @return $this
     */
    public function addHead(string $pattern, $callback)
    {
        $this['router']->head($pattern, $callback);
        return $this;
    }
    /**
     * @param string $prefix
     * @param callable $callback
     * @return $this
     */
    public function addGroup(string $prefix, callable $callback)
    {
        $this['router']->addGroup($prefix, $callback);
        return $this;
    }

    /**
     * @param string $name
     * @param mixed $callback
     * @return $this
     */
    public function addProtocol(string $name, $callback)
    {
        $this['tcp_router']->add($name, $callback);
        return $this;
    }

    /**
     * @param string $prefix
     * @param callback $callback
     * @param string $join
     * @return $this
     */
    public function addProtocolGroup(string $prefix, callable $callback)
    {
        $this['tcp_router']->addGroup($prefix, $callback);
        return $this;
    }

    /**
     * Start to service
     * @throws ServerNotFoundException
     */
    public function run()
    {
        if (!$this->isBoot) {
            $this->boot();
            /**
             * @var $server Server
             */
            $server = $this->get('server');

            if (empty($server)) {
                throw new ServerNotFoundException('Not injected service');
            }
            $server->run();
        }
    }
}